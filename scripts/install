#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_extra_apt_repos__3
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================
ynh_print_info --message="Managing script failure..."

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================
ynh_print_info --message="Retrieving arguments from the manifest..."

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
password=$YNH_APP_ARG_PASSWORD
name=$YNH_APP_ARG_NAME
admin_email=$(ynh_user_get_info $admin 'mail')

app=$YNH_APP_INSTANCE_NAME

datadir="/home/yunohost.app/$app"

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info --message="Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info --message="Storing installation settings..."

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=is_public --value=$is_public
ynh_app_setting_set --app=$app --key=language --value=$language
ynh_app_setting_set --app=$app --key=name --value=$name
ynh_app_setting_set --app=$app --key=admin_email --value=$admin_email
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info --message="Configuring firewall..."

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info --message="Installing dependencies..."

ynh_install_nodejs --nodejs_version="10"

ynh_install_app_dependencies $pkg_dependencies

ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info --message="Creating a PostgreSQL database..."

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
db_pwd=$(ynh_string_random --length=30)
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd
ynh_psql_test_if_first_run
ynh_psql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$db_pwd

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info --message="Setting up source files..."

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"
ynh_setup_source --dest_dir="$final_path/src/client" --source_id=client

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Configuring nginx web server..."

# Create a dedicated nginx config
ynh_add_nginx_config "datadir"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Configuring system user..."

# Create a system user
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE THE DATA DIRECTORY
#=================================================
ynh_print_info --message="Create the data directory..."

# Create app folders
mkdir -p "$datadir"
mkdir -p "$datadir/uploads/avatars"
mkdir -p "$datadir/uploads/max_resolution"

chown -R "$app": "$datadir"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_print_info --message="Modifying a config file..."

# Configure Anfora-web
my_config="$final_path/src/config/my_config.yaml"
cp -f "../conf/my_config.yaml" "$my_config"

ynh_replace_string --match_string="__NAME__" --replace_string="$name" --target_file="$my_config"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$my_config"
ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="$my_config"
ynh_replace_string --match_string="__DATADIR__" --replace_string="$datadir" --target_file="$my_config"
ynh_replace_string --match_string="__FINAL_PATH__" --replace_string="$final_path" --target_file="$my_config"
ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_user" --target_file="$my_config"
ynh_replace_string --match_string="__DB_PWD__" --replace_string="$db_pwd" --target_file="$my_config"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$my_config"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$my_config"

# Configure web interface build
my_env="$final_path/src/client/.env"
cp -f "../conf/.env" "$my_env"

ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$my_env"

# Configure Anfora-queue
huey_consumer="$final_path/src/huey_consumer.py"
cp "../conf/huey_consumer.py" $huey_consumer

task_main="$final_path/src/tasks.main.huey"
cp "../conf/tasks.main.huey" $task_main

#=================================================
# INSTALL PYTHONZ TO GET PYTHON 3.6.8
#=================================================

# Get pythonz
# curl -kL https://raw.githubusercontent.com/saghul/pythonz/master/pythonz-install
# ./pythonz-install
ynh_setup_source --dest_dir="$final_path/.pythonz" --source_id=pythonz
export PYTHONZ_ROOT="$final_path/.pythonz"
# Then install it
python $final_path/.pythonz/pythonz_install.py

# Install Python 3.6.6
$final_path/.pythonz/bin/pythonz install 3.6.8

#=================================================
# INSTALL ANFORA
#=================================================

chown -R "$app":root "$final_path"

pushd "$final_path"
	sudo -u $app virtualenv -p $($final_path/.pythonz/bin/pythonz locate 3.6.8) ve3
	sudo -u $app ve3/bin/pip3 install pipenv
	sudo -u $app ve3/bin/pipenv install --python "$final_path/.pythonz/pythons/CPython-3.6.8/bin/python3.6"
popd

pushd "$final_path/src"
	sudo -u $app ../ve3/bin/pipenv run python commands.py --settings --config $my_config
	salt_code=$(grep -oPi "SALT_CODE ?= ?\"\K[^\"]*" settings.py)
	ynh_app_setting_set --app=$app --key=salt_code --value=$salt_code
	secret=$(grep -oPi "SECRET ?= ?\"\K[^\"]*" settings.py)
	ynh_app_setting_set --app=$app --key=secret --value=$secret
	sudo -u $app ../ve3/bin/pipenv run python commands.py --syncdb
	# sudo -u $app ../ve3/bin/pipenv run python commands.py --migrate --quiet
	sudo -u $app ../ve3/bin/pipenv run python commands.py --usercreate --username "$admin" --password "$password" --email "$admin_email" --is_admin "True"
popd

# Build web interface
pushd "$final_path/src/client"
    ynh_use_nodejs    
    sudo -u $app env PATH=$PATH yarn install
    sudo -u $app env PATH=$PATH yarn build
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info --message="Configuring a systemd service..."

# Create a dedicated systemd config
ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="../conf/anfora-web.service"
ynh_add_systemd_config --service="$app-web"       --template="anfora-web.service"
ynh_add_systemd_config --service="$app-queue"       --template="anfora-queue.service"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_print_info --message="Storing the config file checksum..."

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$final_path/src/settings.py"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_print_info --message="Securing files and directories..."

# Set permissions to app files
chown -R "$app":root "$final_path"

# Give permission to the datadir
chown -R "$app":root "$datadir"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_print_info --message="Integrating service in YunoHost..."

yunohost service add "$app-web" --description "Anfora web service"
yunohost service add "$app-queue" --description "Anfora queue service"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_print_info --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app-web --action="start" --log_path=systemd --line_match="Started $app Anfora Server"

# Queue service not implemented for now
#ynh_systemd_action --service_name=$app-queue --action="start" --log_path=systemd
#--line_match="Started $app-worker"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Configuring SSOwat..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Installation of $app completed"
